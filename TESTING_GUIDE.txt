# Secure File Sharing System - Frontend Testing Guide

## üöÄ Quick Start Instructions

### 1. Start the Application
```bash
# Navigate to the project directory
cd C:\Users\ayush\OneDrive\Desktop\Divansh

# Start the Flask server
C:\Users\ayush\OneDrive\Desktop\Divansh\.venv\Scripts\python.exe app.py
```

### 2. Open the Web Interface
- Open your web browser
- Go to: **http://localhost:5000**
- You should see the File Sharing System homepage

---

## üë• User Credentials

### üîß **Ops User (File Upload)**
- **Email**: `ops@example.com`
- **Password**: `ops123`
- **Purpose**: Upload files to the system
- **Allowed Files**: `.pptx`, `.docx`, `.xlsx` only
- **Max File Size**: 16MB

### üë§ **Client User (File Download)**
You need to create a client user first. Follow these steps:

#### Create New Client User:
1. Click "**Client Signup**" tab
2. Enter any email (e.g., `test@example.com`)
3. Enter any password (e.g., `password123`)
4. Click "**Sign Up**"

#### Verify Client User:
Since email isn't configured, manually verify the user:
```bash
# Open PowerShell and run:
echo test@example.com | C:\Users\ayush\OneDrive\Desktop\Divansh\.venv\Scripts\python.exe verify_client.py
```

#### Client Login:
- **Email**: `test@example.com` (or whatever you used)
- **Password**: `password123` (or whatever you used)

---

## üß™ Complete Testing Workflow

### **STEP 1: Test Ops User (File Upload)**

1. **Login as Ops User**:
   - Click "**Ops Login**" tab
   - Email: `ops@example.com`
   - Password: `ops123`
   - Click "**Login**"
   - You should see the Ops Dashboard

2. **Upload Files**:
   - Click the upload area or drag & drop a file
   - Select a `.docx`, `.pptx`, or `.xlsx` file
   - Click "**Upload File**"
   - You should see a success message

3. **Test File Validation**:
   - Try uploading an invalid file type (e.g., `.txt`, `.jpg`)
   - You should see an error message

4. **Logout**:
   - Click "**Logout**" button

### **STEP 2: Test Client User (File Download)**

1. **Create Client Account** (if not done):
   - Click "**Client Signup**" tab
   - Email: `client@test.com`
   - Password: `client123`
   - Click "**Sign Up**"

2. **Verify Client Account**:
   ```bash
   echo client@test.com | C:\Users\ayush\OneDrive\Desktop\Divansh\.venv\Scripts\python.exe verify_client.py
   ```

3. **Login as Client**:
   - Click "**Client Login**" tab
   - Email: `client@test.com`
   - Password: `client123`
   - Click "**Login**"
   - You should see the Client Dashboard

4. **View Available Files**:
   - You should see a list of all uploaded files
   - Each file shows: name, size, upload date, uploader

5. **Download Files**:
   - Click "**Download**" button next to any file
   - A secure download link will be generated
   - Click the download link to download the file
   - **Note**: Each download link can only be used once!

6. **Test Download Security**:
   - Try using the same download link again
   - You should get an "unauthorized" error

---

## üîç Debugging Frontend Issues

### Check Browser Console
1. Press **F12** to open Developer Tools
2. Go to **Console** tab
3. Look for debug messages during login/upload

### Expected Console Messages

#### Successful Ops Login:
```
üîê Login attempt: ops ops@example.com
üì° Login endpoint: http://localhost:5000/api/auth/ops/login
üì• Login response: 200 {access_token: "...", message: "Login successful"}
‚úÖ Login successful, token stored: Yes
```

#### Successful File Upload:
```
üîß File upload started
Auth token: eyJhbGciOiJIUzI1NiIs...
Selected file: File {name: "test.docx", size: 1024, type: "..."}
‚úÖ File validation passed
üì° Sending upload request to: http://localhost:5000/api/ops/upload
üì• Upload response status: 201
üì• Upload response data: {file_id: 1, message: "File uploaded successfully"}
```

### Common Issues & Solutions

#### ‚ùå "Auth token: null"
**Problem**: Login didn't work
**Solution**: 
- Check credentials
- Check server is running
- Try logging out and back in

#### ‚ùå "Invalid file type"
**Problem**: Wrong file format
**Solution**: Use only `.docx`, `.pptx`, or `.xlsx` files

#### ‚ùå "Failed to fetch"
**Problem**: Server not running or network issue
**Solution**: 
- Check server is running on http://localhost:5000
- Check firewall/antivirus isn't blocking

#### ‚ùå "Upload response status: 401"
**Problem**: Authentication failed
**Solution**: Login again to get fresh token

---

## üß™ API Testing (Alternative)

If frontend doesn't work, test the API directly:

### Test Script:
```bash
C:\Users\ayush\OneDrive\Desktop\Divansh\.venv\Scripts\python.exe final_client_test.py
```

### Manual API Testing:

#### 1. Test Ops Login:
```bash
curl -X POST http://localhost:5000/api/auth/ops/login ^
  -H "Content-Type: application/json" ^
  -d "{\"email\": \"ops@example.com\", \"password\": \"ops123\"}"
```

#### 2. Test Client Login:
```bash
curl -X POST http://localhost:5000/api/auth/client/login ^
  -H "Content-Type: application/json" ^
  -d "{\"email\": \"client@test.com\", \"password\": \"client123\"}"
```

#### 3. Test List Files:
```bash
curl -X GET http://localhost:5000/api/client/files ^
  -H "Authorization: Bearer YOUR_JWT_TOKEN"
```

---

## üìÅ Test Files

Create these test files for upload testing:

### test.docx
- Any Word document
- Size: < 16MB
- Should upload successfully

### test.pptx
- Any PowerPoint presentation
- Size: < 16MB
- Should upload successfully

### test.xlsx
- Any Excel spreadsheet
- Size: < 16MB
- Should upload successfully

### test.txt (Should Fail)
- Any text file
- Should be rejected with "Invalid file type" error

---

## üîß Server Management

### Start Server:
```bash
C:\Users\ayush\OneDrive\Desktop\Divansh\.venv\Scripts\python.exe app.py
```

### Stop Server:
- Press `Ctrl+C` in the terminal
- Or close the terminal window

### Restart Server (if needed):
```bash
# Stop server first (Ctrl+C)
# Then start again:
C:\Users\ayush\OneDrive\Desktop\Divansh\.venv\Scripts\python.exe app.py
```

---

## üìä Expected Test Results

### ‚úÖ Successful Tests:
- Ops user can login
- Ops user can upload valid files (.docx, .pptx, .xlsx)
- Invalid file types are rejected
- Client user can signup and login (after verification)
- Client user can see all uploaded files
- Client user can generate download links
- Client user can download files
- Download links are single-use only
- Cross-user access is blocked

### ‚ùå Expected Failures (Security Features):
- Unverified client users cannot login
- Invalid file types cannot be uploaded
- Used download tokens cannot be reused
- Ops users cannot access client functions
- Client users cannot upload files

---

## üÜò Troubleshooting

### Server Won't Start:
- Check if another process is using port 5000
- Check if Python virtual environment is activated
- Check for syntax errors in code files

### Frontend Not Loading:
- Check server is running on http://localhost:5000
- Try refreshing the page
- Check browser console for errors

### Upload Not Working:
- Check file type and size
- Check if logged in as ops user
- Check browser console for debug messages
- Verify auth token is present

### Download Not Working:
- Check if logged in as client user
- Check if files exist in the system
- Verify download link format
- Check if token is already used

---

## üìû Support Commands

### Check Server Status:
```bash
curl http://localhost:5000/health
```

### Run Full Test Suite:
```bash
C:\Users\ayush\OneDrive\Desktop\Divansh\.venv\Scripts\python.exe final_client_test.py
```

### Debug Upload Issues:
```bash
C:\Users\ayush\OneDrive\Desktop\Divansh\.venv\Scripts\python.exe debug_frontend_upload.py
```

### Verify Client User:
```bash
echo EMAIL_ADDRESS | C:\Users\ayush\OneDrive\Desktop\Divansh\.venv\Scripts\python.exe verify_client.py
```

---

## üéØ Quick Test Checklist

- [ ] Server starts successfully
- [ ] Homepage loads at http://localhost:5000
- [ ] Ops login works with ops@example.com/ops123
- [ ] File upload works with valid files
- [ ] Invalid files are rejected
- [ ] Client signup works
- [ ] Client verification works
- [ ] Client login works after verification
- [ ] Client can see file list
- [ ] Client can generate download links
- [ ] Client can download files
- [ ] Download links are single-use
- [ ] Logout works for both user types

**Happy Testing! üöÄ**
